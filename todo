# 1. Render bars of spectrum.
#### milestone 1
- [x] 0. Rename Waveplot to BarPlot.
- [x] 1. generate test bars. For example: 1024 bars.
- [x] 2. make it draw with current shader.
- [x] 3. Improve current shader. Regardles position/index and size;
- [x] 4. Clean up code and refactor to make it more usable.
#### milestone 2
- [x] 5. Calculate FFT using existing crates.
- [x] 6. Pass FFT data to renderer.
#### milestone 3
- [x] 7. Add windowing function before FFT
- [x] 8. Create stream analyzer. With overlap option.
- [x] 9. Little refactor of code. FFT calculation present on AudioCapture side.
- [x] 10. Render present spectrum over mean spectrum.
- [x] 11. Add variable FFT length changing.
- [x] 12. Refactor. Extract spectrum related option to higher layer. Add to ui.
- [x] 13. Clean up code/refactor


- [x] <b>BUG: fix shader to render apropriate number of bars when changing length</b>
#### milestone 4

# 2. Render wave plot
- [x] 1. Make first shader
- [x] 2. Make code similar to bar for drawing.
- [x] 3. Improve current shader. Render test lines.
- [x] 3.5. Fixing line renderer. Drawing lines with connector. Open/Closed lines
- [x] 4. Clean up code and refactor to make it more usable.
#### milestone 5
- [ ] 1. Make view for rendering waveplot on top half of screen and spectrum on bottom half. Draw test lines there.
- [x] 1.1 Render to texture
- [x] 1.2 Update UI to render parameters editor and graph side by side
- [ ] 1.3 Refactor
- [ ] 2. Use egui for managing layout? make window with spectrum view and window with waveform view. Render to texture? of required size?

# 3. Time analysis of spectrum
# 3.1 Make filters for frequency bands.
* Store them in a time buffer for further analysys
# 3.2 Make horizontal view for each frequency band using lines with height as magnitude
* Fresh data on the right. Past data on the left. Like waveplot.
